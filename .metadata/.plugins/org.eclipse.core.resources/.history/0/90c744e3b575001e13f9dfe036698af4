package com.ecom.controller;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.security.authentication.AuthenticationManager;
import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.web.bind.annotation.*;

import com.ecom.configuration.JwtRequest;
import com.ecom.configuration.JwtResponse;
import com.ecom.configuration.JwtUserDetailsService;
import com.ecom.configuration.JwtUtil;

import java.util.Objects;

@RestController
@CrossOrigin
public class JwtAuthenticationController {
	 @Autowired
	    private AuthenticationManager authenticationManager;
	 @Autowired
	 private JwtUserDetailsService jwtUserDetailsService;

	    @Autowired
	    private JwtUtil jwtTokenUtil;

	    @RequestMapping(value = "/authenticate", method = RequestMethod.POST)
	    public ResponseEntity<?> createAuthenticationToken(@RequestBody JwtRequest authenticationRequest) throws Exception {
	        authenticate(authenticationRequest.getEmail(), authenticationRequest.getPassword());
	        final UserDetails userDetails = jwtUserDetailsService.loadUserByUsername(authenticationRequest.getEmail());
	        final String token = jwtTokenUtil.generateToken(userDetails);
	        return ResponseEntity.ok(new JwtResponse(token));
	    }

	    private void authenticate(String username, String password) throws Exception {
	        Objects.requireNonNull(username);
	        Objects.requireNonNull(password);
	        try {
	            authenticationManager.authenticate(new UsernamePasswordAuthenticationToken(username, password));
	        } catch (DisabledException e) {
	            throw new Exception("USER_DISABLED", e);
	        } catch (BadCredentialsException e) {
	            throw new Exception("INVALID_CREDENTIALS", e);
	        }
	    }
}
